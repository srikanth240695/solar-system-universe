name: Solar System WorkFlow

on:
    workflow_dispatch:
    push:
        branches:
            - main
            - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}


jobs:
    unit-testing:
        name: unit-testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
            MONGO_URI: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password

        strategy:
          matrix:
            nodejs_version: [18]
            operating_system: [ubuntu-latest, macos-latest]
            exclude:
              - nodejs_version: 18
                operating_system: macos-latest
        runs-on: ${{ matrix.operating_system}}

        steps:
        - name: checkout repository 
          uses: actions/checkout@v4
        
        - name: setup NodeJs Version - ${{ matrix.nodejs_version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version }}

        - name: cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

        - name: Install Dependencies
          run: npm install
               
        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test 

        - name: Archive test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result - ${{ matrix.operating_system }}-${{ matrix.nodejs_version }}
            path: test-results.xml

    code-coverage:
        name: code-coverage
        container: 
          image: node:18
        
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options:
              --name mongo
        env:
            MONGO_URI: 'mongodb://mongo:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password

        runs-on: ubuntu-latest
        steps:
        - name: checkout repository 
          uses: actions/checkout@v4
        
        # - name: setup NodeJs Version - 18
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: 18
          
        - name: cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

        - name: Install Dependencies
          run: npm install
        
        - name: Check Code Coverage
          continue-on-error: true
          run: npm run coverage
        
        - name: Archive test Result
          uses: actions/upload-artifact@v4
          with:
            name: code-coverage-result
            path: coverage
            retention-days: 5 
    
    docker:
        name: Containerization
        needs: [unit-testing, code-coverage]
        permissions: 
            packages: write
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repo
          uses: actions/checkout@v3

        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: GHCR Login 
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Docker build for Testing
          uses: docker/build-push-action@v4
          with: 
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME}}/solar-system-universe:${{ github.sha}}

        - name: Docker Image Testing
          run: |
            docker images
            docker run --name solar-system-appy -d \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ vars.DOCKERHUB_USERNAME}}/solar-system-universe:${{ github.sha}}
            
            export IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-appy)
            echo $IP

            echo Testing Image URL using wget 
            wget -q -O - 127.0.0.1:3000/live | grep live

        - name: Container Registry push
          uses: docker/build-push-action@v4
          with: 
            context: .
            push: true
            tags: |
                ${{ vars.DOCKERHUB_USERNAME}}/solar-system-universe:${{ github.sha}}
                ghcr.io/${{ github.repository_owner }}/solar-system-universe:${{ github.sha}}

    dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      steps:
        - name: checkout Repo
          uses: actions/checkout@v4

        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v4
          with:
            version: 'v1.32.2'

        # Install k3d - lightweight Kubernetes in Docker
        - name: Install k3d
          run: curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
        
        # Create a k3d cluster for kubectl testing
        - name: Create k3d cluster
          run: k3d cluster create test-cluster
        
        # Verify kubectl works
        - name: Verify kubectl commands work
          run: |
            kubectl version
            echo "------------------------"
            kubectl get nodes
            echo "------------------------"
            kubectl get all --all-namespaces

        - name: Get Ingress IP
          run: |
            # Wait for ingress controller to be ready
            kubectl -n ingress-nginx wait --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=90s || true
            
            # Get the ingress IP with proper jsonpath syntax
            INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            echo "INGRESS_IP=$INGRESS_IP" >> $GITHUB_ENV
            
            # If IP is empty, try hostname instead (for AWS ELB)
            if [ -z "$INGRESS_IP" ]; then
            INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo "INGRESS_IP=$INGRESS_IP" >> $GITHUB_ENV
            fi
            
            # Set default namespace
            echo "NAMESPACE=default" >> $GITHUB_ENV
            
            # Set replicas
            echo "REPLICAS=1" >> $GITHUB_ENV
          shell: /usr/bin/bash -e {0}
          env:
            MONGO_URI: mongodb+srv://supercluster.d83jj.mongodb.net/superData
            MONGO_USERNAME: superuser
            MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
        
        - name: Replace tokens in Kubernetes manifests
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          env:
            MONGO_URI: mongodb+srv://supercluster.d83jj.mongodb.net/superData
            MONGO_USERNAME: superuser
            MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
            INGRESS_IP: ${{ env.INGRESS_IP }}
            NAMESPACE: ${{ env.NAMESPACE }}
            REPLICAS: ${{ env.REPLICAS }}
            IMAGE: 809565/solar-system:${{ github.sha }}

        # - name: Save nginx Ingress controller IP as a GITHUB Environment Variable
        #   run: |
        #     echo "INGRESS_IP = $(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath= "{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV

        # - name: Replace token in Manifest files
        #   uses: cschleiden/replace-tokens@v1
        #   with:
        #     tokenPrefix: '_{_'
        #     tokenSuffix: '_}_'
        #     files: '["kubernetes\development\*.yaml"]'
        #   env:
        #     NAMESPACE: ${{ vars.NAMESPACE }}
        #     REPLICAS: ${{ vars.REPLICAS }}
        #     IMAGE: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha}}
        #     INGRESS_IP: ${{ env.INGRESS_IP}} 

        # - name: set kubeconfig
        #   uses: azure/k8s-set-context@v4
        #   with:
        #     method: kubeconfig
        #     kubeconfig: ${{ secrets.KUBECONFIG }}

        # - name: Fetch kubernetes cluster details
        #   run: |
        #     kubectl version 
        #     echo -----------------------
        #     kubectl get nodes
        